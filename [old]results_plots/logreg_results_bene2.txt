Best auc_score on train set: 0.725
Best parameter set: {'clf__C': 200, 'clf__dual': False, 'clf__penalty': 'l2', 'clf__solver': 'liblinear', 'preprocessing__categorical__base_encoder': OrdinalEncoder(categories=[['6', '1', '5', '2', '3', '4', '7', '9', '8'],
                           ['1', '0'], ['4', '1', '3', '2', '6'],
                           ['3', '18', '2', '5', '11', '15', '17', '12', '19',
                            '4', '29', '7', '16', '1', '21', '23', '9', '24',
                            '14', '27', '13', '8', '10', '26', '6', '25'],
                           ['2', '1', '6', '5', '8', '3'], ['1', '2', '3', '4'],
                           ['1', '0'], ['1', '2', '3', '4'], ['0', '1'],
                           ['0', '1']],
               dtype=<class 'numpy.float64'>), 'preprocessing__categorical__encoder': OneHotEncoder(categories=[array([0., 1., 2., 3., 4., 5., 6., 7., 8.]),
                          array([0., 1.]), array([0., 1., 2., 3., 4.]),
                          array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.,
       13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.]),
                          array([0., 1., 2., 3., 4., 5.]),
                          array([0., 1., 2., 3.]), array([0., 1.]),
                          array([0., 1., 2., 3.]), array([0., 1.]),
                          array([0., 1.])],
              drop=None, dtype=<class 'numpy.float64'>, handle_unknown='error',
              sparse=True), 'preprocessing__numerical__highVifDropper': HighVIFDropper(threshold=10), 'preprocessing__numerical__scaler': StandardScaler(copy=True, with_mean=True, with_std=True)}
Best scores index: 108
Scores for train set:               precision    recall  f1-score   support

       False       0.78      0.70      0.74      4026
        True       0.67      0.76      0.71      3220

    accuracy                           0.73      7246
   macro avg       0.73      0.73      0.73      7246
weighted avg       0.73      0.73      0.73      7246

